/** Generated by BaggageBuffersCompiler */
package edu.brown.cs.systems.tracingplane.opentracing;

import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Struct;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.StructHelpers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.BBUtils;
import java.nio.ByteBuffer;


public class HTraceID implements Struct {

    private static final Logger _log = LoggerFactory.getLogger(HTraceID.class);

    public Long upper = 0L;
    public Long lower = 0L;

    private static final HTraceID _defaultValue = new HTraceID();
    private static final Long _upper_defaultValue = 0L;
    private static final Long _lower_defaultValue = 0L;

    @Override
    public Struct.StructHandler<?> handler() {
        return Handler.instance;
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("HTraceID{\n");
            b.append(BBUtils.indent(String.format("upper = %s\n", String.valueOf(this.upper == null ? _upper_defaultValue : this.upper))));
            b.append(BBUtils.indent(String.format("lower = %s\n", String.valueOf(this.lower == null ? _lower_defaultValue : this.lower))));
            b.append("}");
        return b.toString();
    }

    @Override
    public boolean equals(Object other) {
        if (other == null) {
            return HTraceID.equals(this, _defaultValue);
        } else if (!(other instanceof HTraceID)) {
            return false;
        } else {
            return HTraceID.equals(this, (HTraceID) other);
        }
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = result * 37 + (this.upper == null ? _upper_defaultValue : this.upper).hashCode();
        result = result * 37 + (this.lower == null ? _lower_defaultValue : this.lower).hashCode();
        return result;
    }

    private static boolean equals(HTraceID a, HTraceID b) {
        if (!BBUtils.equals(a.upper, b.upper, _upper_defaultValue)) return false;
        if (!BBUtils.equals(a.lower, b.lower, _lower_defaultValue)) return false;
        return true;
    }

    public static class Handler implements Struct.StructHandler<HTraceID> {

        public static final Handler instance = new Handler();

        private Handler(){}


        private static final Struct.StructReader<Long> _upperReader = StructHelpers.fixed64Reader;
        private static final Struct.StructSizer<Long> _upperSizer = StructHelpers.fixed64Sizer;
        private static final Struct.StructWriter<Long> _upperWriter = StructHelpers.fixed64Writer;

        private static final Struct.StructReader<Long> _lowerReader = StructHelpers.fixed64Reader;
        private static final Struct.StructSizer<Long> _lowerSizer = StructHelpers.fixed64Sizer;
        private static final Struct.StructWriter<Long> _lowerWriter = StructHelpers.fixed64Writer;

        @Override
        public HTraceID readFrom(ByteBuffer buf) throws Exception {
            HTraceID instance = new HTraceID();

            try {
                instance.upper = _upperReader.readFrom(buf);
                instance.lower = _lowerReader.readFrom(buf);
            } catch (Exception e) {
                _log.warn("Exception parsing HTraceID ", e);
            }

            return instance;
        }

        @Override
        public void writeTo(ByteBuffer buf, HTraceID instance) {
            try {
                _upperWriter.writeTo(buf, instance.upper == null ? _upper_defaultValue : instance.upper);
                _lowerWriter.writeTo(buf, instance.lower == null ? _lower_defaultValue : instance.lower);
            } catch (Exception e) {
                _log.warn("Exception serializing HTraceID ", e);
            }
        }

        @Override
        public int serializedSize(HTraceID instance) {
            int size = 0;
            size += _upperSizer.serializedSize(instance.upper == null ? _upper_defaultValue : instance.upper);
            size += _lowerSizer.serializedSize(instance.lower == null ? _lower_defaultValue : instance.lower);
            return size;
        }
    }
}