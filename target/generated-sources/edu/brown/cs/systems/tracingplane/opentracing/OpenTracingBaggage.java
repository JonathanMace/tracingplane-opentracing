/** Generated by BaggageBuffersCompiler */
package edu.brown.cs.systems.tracingplane.opentracing;

import edu.brown.cs.systems.tracingplane.baggage_buffers.BaggageBuffers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.Registrations;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Bag;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.BaggageHandler;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Brancher;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Joiner;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Parser;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Serializer;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.BBUtils;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Branchers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Joiners;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Parsers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.ReaderHelpers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Serializers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.WriterHelpers;
import edu.brown.cs.systems.tracingplane.baggage_layer.BagKey;
import edu.brown.cs.systems.tracingplane.baggage_layer.protocol.BaggageReader;
import edu.brown.cs.systems.tracingplane.baggage_layer.protocol.BaggageWriter;
import edu.brown.cs.systems.tracingplane.transit_layer.Baggage;
import java.util.Map;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class OpenTracingBaggage implements Bag {

    private static final Logger _log = LoggerFactory.getLogger(OpenTracingBaggage.class);

    public Map<String, String> fields = null;

    public boolean _overflow = false;

    /**
    * <p>
    * Get the {@link OpenTracingBaggage} set in the {@link Baggage} carried by the current thread. If no baggage is being
    * carried by the current thread, or if there is no OpenTracingBaggage in it, then this method returns {@code null}.
    * </p>
    *
    * <p>
    * To get OpenTracingBaggage from a specific Baggage instance, use {@link #getFrom(Baggage)}.
    * </p>
    *
    * @return the OpenTracingBaggage being carried in the {@link Baggage} of the current thread, or {@code null}
    *         if none is being carried. The returned instance maybe be modified and modifications will be reflected in
    *         the baggage.
    */
    public static OpenTracingBaggage get() {
        Bag bag = BaggageBuffers.get(Handler.registration());
        if (bag instanceof OpenTracingBaggage) {
            return (OpenTracingBaggage) bag;
        } else {
            return null;
        }
    }

    /**
    * <p>
    * Get the {@link OpenTracingBaggage} set in {@code baggage}. If {@code baggage} has no OpenTracingBaggage set then
    * this method returns null.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the Baggage being carried by the current thread.  To get OpenTracingBaggage
    * from the current thread's Baggage, use {@link #get()}.
    * </p>
    *
    * @param baggage A baggage instance to get the {@link OpenTracingBaggage} from
    * @return the {@link OpenTracingBaggage} instance being carried in {@code baggage}, or {@code null} if none is being carried.
    *         The returned instance can be modified, and modifications will be reflected in the baggage.
    */
    public static OpenTracingBaggage getFrom(Baggage baggage) {
        Bag bag = BaggageBuffers.get(baggage, Handler.registration());
        if (bag instanceof OpenTracingBaggage) {
            return (OpenTracingBaggage) bag;
        } else if (bag != null) {
            Handler.checkRegistration();
        }
        return null;
    }

    /**
    * <p>
    * Update the {@link OpenTracingBaggage} set in the current thread's baggage. This method will overwrite any existing
    * OpenTracingBaggage set in the current thread's baggage.
    * </p>
    *
    * <p>
    * To set the {@link OpenTracingBaggage} in a specific {@link Baggage} instance, use
    * {@link #setIn(Baggage, OpenTracingBaggage)}
    * </p>
    *
    * @param openTracingBaggage the new {@link OpenTracingBaggage} to set in the current thread's {@link Baggage}. If {@code null}
    *            then any existing mappings will be removed.
    */
    public static void set(OpenTracingBaggage openTracingBaggage) {
        BaggageBuffers.set(Handler.registration(), openTracingBaggage);
    }

    /**
    * <p>
    * Update the {@link OpenTracingBaggage} set in {@code baggage}. This method will overwrite any existing
    * OpenTracingBaggage set in {@code baggage}.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the {@link Baggage} being carried by the current thread. To set the
    * {@link OpenTracingBaggage} for the current thread, use {@link #set(OpenTracingBaggage)}
    * </p>
    *
    * @param baggage A baggage instance to set the {@link OpenTracingBaggage} in
    * @param openTracingBaggage the new OpenTracingBaggage to set in {@code baggage}. If {@code null}, it will remove any
    *            mapping present.
    * @return a possibly new {@link Baggage} instance that contains all previous mappings plus the new mapping.
    */
    public static Baggage setIn(Baggage baggage, OpenTracingBaggage openTracingBaggage) {
        return BaggageBuffers.set(baggage, Handler.registration(), openTracingBaggage);
    }

    @Override
    public BaggageHandler<?> handler() {
        return Handler.instance;
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("OpenTracingBaggage{\n");
            b.append(this.fields == null ? "" : BBUtils.indent(String.format("fields = %s\n", BBUtils.toString(this.fields, _v -> String.valueOf(_v)))));
            b.append("}");
        return b.toString();
    }

    public static class Handler implements BaggageHandler<OpenTracingBaggage> {

        public static final Handler instance = new Handler();
        private static BagKey registration = null;

        static synchronized BagKey checkRegistration() {
            registration = Registrations.lookup(instance);
            if (registration == null) {
                _log.error("OpenTracingBaggage MUST be registered to a key before it can be propagated.  " +
                "There is currently no registration for OpenTracingBaggage and it will not be propagated. " +
                "To register a bag set the baggage-buffers.bags property in your application.conf " +
                "or with -Dbaggage-buffers.bags flag (eg, for key 10, -Dbaggage-buffers.bags.10=" + OpenTracingBaggage.class.getName());
            }
            return registration;
        }

        static BagKey registration() {
            return registration == null ? checkRegistration() : registration;
        }

        private Handler(){}

        private static final BagKey _fieldsKey = BagKey.indexed(0);

        private static final Parser<Map<String, String>> _fieldsParser = Parsers.mapParser(ReaderHelpers.to_string, Parsers.stringParser());
        private static final Serializer<Map<String, String>> _fieldsSerializer = Serializers.mapSerializer(WriterHelpers.from_string, Serializers.stringSerializer());
        private static final Brancher<Map<String, String>> _fieldsBrancher = Branchers.<String, String>map(Branchers.<String>noop());
        private static final Joiner<Map<String, String>> _fieldsJoiner = Joiners.<String, String>mapMerge(Joiners.<String>first());

        @Override
        public boolean isInstance(Bag bag) {
            return bag == null || bag instanceof OpenTracingBaggage;
        }

        @Override
        public OpenTracingBaggage parse(BaggageReader reader) {
            OpenTracingBaggage instance = new OpenTracingBaggage();

            if (reader.enter(_fieldsKey)) {
                instance.fields = _fieldsParser.parse(reader);
                reader.exit();
            }
            instance._overflow = reader.didOverflow();

            return instance;
        }

        @Override
        public void serialize(BaggageWriter writer, OpenTracingBaggage instance) {
            if (instance == null) {
                return;
            }

            writer.didOverflowHere(instance._overflow);

            if (instance.fields != null) {
                writer.enter(_fieldsKey);
                _fieldsSerializer.serialize(writer, instance.fields);
                writer.exit();
            }
        }

        @Override
        public OpenTracingBaggage branch(OpenTracingBaggage instance) {
            if (instance == null) {
                return null;
            }

            OpenTracingBaggage newInstance = new OpenTracingBaggage();
            newInstance.fields = _fieldsBrancher.branch(instance.fields);
            return newInstance;
        }

        @Override
        public OpenTracingBaggage join(OpenTracingBaggage left, OpenTracingBaggage right) {
            if (left == null) {
                return right;
            } else if (right == null) {
                return left;
            } else {
                left.fields = _fieldsJoiner.join(left.fields, right.fields);
                return left;
            }
        }
    }
}