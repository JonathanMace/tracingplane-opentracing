/** Generated by BaggageBuffersCompiler */
package edu.brown.cs.systems.tracingplane.opentracing;

import edu.brown.cs.systems.tracingplane.baggage_buffers.BaggageBuffers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.Registrations;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Bag;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.BaggageHandler;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Brancher;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Joiner;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Parser;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Serializer;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.BBUtils;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Branchers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Joiners;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Parsers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Serializers;
import edu.brown.cs.systems.tracingplane.baggage_layer.BagKey;
import edu.brown.cs.systems.tracingplane.baggage_layer.protocol.BaggageReader;
import edu.brown.cs.systems.tracingplane.baggage_layer.protocol.BaggageWriter;
import edu.brown.cs.systems.tracingplane.opentracing.ZipkinFlags;
import edu.brown.cs.systems.tracingplane.transit_layer.Baggage;
import java.util.Set;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class ZipkinMetadata implements Bag {

    private static final Logger _log = LoggerFactory.getLogger(ZipkinMetadata.class);

    public Long traceId = null;
    public Set<Long> spanIds = null;
    public Set<Long> parentSpanIds = null;
    public ZipkinFlags flags = null;

    public boolean _overflow = false;

    /**
    * <p>
    * Get the {@link ZipkinMetadata} set in the {@link Baggage} carried by the current thread. If no baggage is being
    * carried by the current thread, or if there is no ZipkinMetadata in it, then this method returns {@code null}.
    * </p>
    *
    * <p>
    * To get ZipkinMetadata from a specific Baggage instance, use {@link #getFrom(Baggage)}.
    * </p>
    *
    * @return the ZipkinMetadata being carried in the {@link Baggage} of the current thread, or {@code null}
    *         if none is being carried. The returned instance maybe be modified and modifications will be reflected in
    *         the baggage.
    */
    public static ZipkinMetadata get() {
        Bag bag = BaggageBuffers.get(Handler.registration());
        if (bag instanceof ZipkinMetadata) {
            return (ZipkinMetadata) bag;
        } else {
            return null;
        }
    }

    /**
    * <p>
    * Get the {@link ZipkinMetadata} set in {@code baggage}. If {@code baggage} has no ZipkinMetadata set then
    * this method returns null.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the Baggage being carried by the current thread.  To get ZipkinMetadata
    * from the current thread's Baggage, use {@link #get()}.
    * </p>
    *
    * @param baggage A baggage instance to get the {@link ZipkinMetadata} from
    * @return the {@link ZipkinMetadata} instance being carried in {@code baggage}, or {@code null} if none is being carried.
    *         The returned instance can be modified, and modifications will be reflected in the baggage.
    */
    public static ZipkinMetadata getFrom(Baggage baggage) {
        Bag bag = BaggageBuffers.get(baggage, Handler.registration());
        if (bag instanceof ZipkinMetadata) {
            return (ZipkinMetadata) bag;
        } else if (bag != null) {
            Handler.checkRegistration();
        }
        return null;
    }

    /**
    * <p>
    * Update the {@link ZipkinMetadata} set in the current thread's baggage. This method will overwrite any existing
    * ZipkinMetadata set in the current thread's baggage.
    * </p>
    *
    * <p>
    * To set the {@link ZipkinMetadata} in a specific {@link Baggage} instance, use
    * {@link #setIn(Baggage, ZipkinMetadata)}
    * </p>
    *
    * @param zipkinMetadata the new {@link ZipkinMetadata} to set in the current thread's {@link Baggage}. If {@code null}
    *            then any existing mappings will be removed.
    */
    public static void set(ZipkinMetadata zipkinMetadata) {
        BaggageBuffers.set(Handler.registration(), zipkinMetadata);
    }

    /**
    * <p>
    * Update the {@link ZipkinMetadata} set in {@code baggage}. This method will overwrite any existing
    * ZipkinMetadata set in {@code baggage}.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the {@link Baggage} being carried by the current thread. To set the
    * {@link ZipkinMetadata} for the current thread, use {@link #set(ZipkinMetadata)}
    * </p>
    *
    * @param baggage A baggage instance to set the {@link ZipkinMetadata} in
    * @param zipkinMetadata the new ZipkinMetadata to set in {@code baggage}. If {@code null}, it will remove any
    *            mapping present.
    * @return a possibly new {@link Baggage} instance that contains all previous mappings plus the new mapping.
    */
    public static Baggage setIn(Baggage baggage, ZipkinMetadata zipkinMetadata) {
        return BaggageBuffers.set(baggage, Handler.registration(), zipkinMetadata);
    }

    @Override
    public BaggageHandler<?> handler() {
        return Handler.instance;
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("ZipkinMetadata{\n");
            b.append(this.traceId == null ? "" : BBUtils.indent(String.format("traceId = %s\n", String.valueOf(this.traceId))));
            b.append(this.spanIds == null ? "" : BBUtils.indent(String.format("spanIds = %s\n", BBUtils.toString(this.spanIds))));
            b.append(this.parentSpanIds == null ? "" : BBUtils.indent(String.format("parentSpanIds = %s\n", BBUtils.toString(this.parentSpanIds))));
            b.append(this.flags == null ? "" : BBUtils.indent(String.format("flags = %s\n", String.valueOf(this.flags))));
            b.append("}");
        return b.toString();
    }

    public static class Handler implements BaggageHandler<ZipkinMetadata> {

        public static final Handler instance = new Handler();
        private static BagKey registration = null;

        static synchronized BagKey checkRegistration() {
            registration = Registrations.lookup(instance);
            if (registration == null) {
                _log.error("ZipkinMetadata MUST be registered to a key before it can be propagated.  " +
                "There is currently no registration for ZipkinMetadata and it will not be propagated. " +
                "To register a bag set the baggage-buffers.bags property in your application.conf " +
                "or with -Dbaggage-buffers.bags flag (eg, for key 10, -Dbaggage-buffers.bags.10=" + ZipkinMetadata.class.getName());
            }
            return registration;
        }

        static BagKey registration() {
            return registration == null ? checkRegistration() : registration;
        }

        private Handler(){}

        private static final BagKey _traceIdKey = BagKey.indexed(1);
        private static final BagKey _spanIdsKey = BagKey.indexed(2);
        private static final BagKey _parentSpanIdsKey = BagKey.indexed(3);
        private static final BagKey _flagsKey = BagKey.indexed(4);

        private static final Parser<Long> _traceIdParser = Parsers.fixed64Parser();
        private static final Serializer<Long> _traceIdSerializer = Serializers.fixed64Serializer();
        private static final Brancher<Long> _traceIdBrancher = Branchers.<Long>noop();
        private static final Joiner<Long> _traceIdJoiner = Joiners.<Long>first();

        private static final Parser<Set<Long>> _spanIdsParser = Parsers.setParser(Parsers.fixed64Parser());
        private static final Serializer<Set<Long>> _spanIdsSerializer = Serializers.setSerializer(Serializers.fixed64Serializer());
        private static final Brancher<Set<Long>> _spanIdsBrancher = Branchers.<Long>set();
        private static final Joiner<Set<Long>> _spanIdsJoiner = Joiners.<Long>setUnion();

        private static final Parser<Set<Long>> _parentSpanIdsParser = Parsers.setParser(Parsers.fixed64Parser());
        private static final Serializer<Set<Long>> _parentSpanIdsSerializer = Serializers.setSerializer(Serializers.fixed64Serializer());
        private static final Brancher<Set<Long>> _parentSpanIdsBrancher = Branchers.<Long>set();
        private static final Joiner<Set<Long>> _parentSpanIdsJoiner = Joiners.<Long>setUnion();

        private static final BaggageHandler<ZipkinFlags> _flagsHandler = ZipkinFlags.Handler.instance;

        @Override
        public boolean isInstance(Bag bag) {
            return bag == null || bag instanceof ZipkinMetadata;
        }

        @Override
        public ZipkinMetadata parse(BaggageReader reader) {
            ZipkinMetadata instance = new ZipkinMetadata();

            if (reader.enter(_traceIdKey)) {
                instance.traceId = _traceIdParser.parse(reader);
                reader.exit();
            }

            if (reader.enter(_spanIdsKey)) {
                instance.spanIds = _spanIdsParser.parse(reader);
                reader.exit();
            }

            if (reader.enter(_parentSpanIdsKey)) {
                instance.parentSpanIds = _parentSpanIdsParser.parse(reader);
                reader.exit();
            }

            if (reader.enter(_flagsKey)) {
                instance.flags = _flagsHandler.parse(reader);
                reader.exit();
            }
            instance._overflow = reader.didOverflow();

            return instance;
        }

        @Override
        public void serialize(BaggageWriter writer, ZipkinMetadata instance) {
            if (instance == null) {
                return;
            }

            writer.didOverflowHere(instance._overflow);

            if (instance.traceId != null) {
                writer.enter(_traceIdKey);
                _traceIdSerializer.serialize(writer, instance.traceId);
                writer.exit();
            }

            if (instance.spanIds != null) {
                writer.enter(_spanIdsKey);
                _spanIdsSerializer.serialize(writer, instance.spanIds);
                writer.exit();
            }

            if (instance.parentSpanIds != null) {
                writer.enter(_parentSpanIdsKey);
                _parentSpanIdsSerializer.serialize(writer, instance.parentSpanIds);
                writer.exit();
            }

            if (instance.flags != null) {
                writer.enter(_flagsKey);
                _flagsHandler.serialize(writer, instance.flags);
                writer.exit();
            }
        }

        @Override
        public ZipkinMetadata branch(ZipkinMetadata instance) {
            if (instance == null) {
                return null;
            }

            ZipkinMetadata newInstance = new ZipkinMetadata();
            newInstance.traceId = _traceIdBrancher.branch(instance.traceId);
            newInstance.spanIds = _spanIdsBrancher.branch(instance.spanIds);
            newInstance.parentSpanIds = _parentSpanIdsBrancher.branch(instance.parentSpanIds);
            newInstance.flags = _flagsHandler.branch(instance.flags);
            return newInstance;
        }

        @Override
        public ZipkinMetadata join(ZipkinMetadata left, ZipkinMetadata right) {
            if (left == null) {
                return right;
            } else if (right == null) {
                return left;
            } else {
                left.traceId = _traceIdJoiner.join(left.traceId, right.traceId);
                left.spanIds = _spanIdsJoiner.join(left.spanIds, right.spanIds);
                left.parentSpanIds = _parentSpanIdsJoiner.join(left.parentSpanIds, right.parentSpanIds);
                left.flags = _flagsHandler.join(left.flags, right.flags);
                return left;
            }
        }
    }
}