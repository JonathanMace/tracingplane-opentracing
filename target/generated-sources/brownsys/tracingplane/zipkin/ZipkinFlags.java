/** Generated by BaggageBuffersCompiler */
package brownsys.tracingplane.zipkin;

import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Struct;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.StructHelpers;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.BBUtils;
import java.nio.ByteBuffer;


public class ZipkinFlags implements Struct {

    private static final Logger _log = LoggerFactory.getLogger(ZipkinFlags.class);

    public Boolean sampleAttempted = false;
    public Boolean sampled = false;
    public Boolean debug = false;

    private static final ZipkinFlags _defaultValue = new ZipkinFlags();
    private static final Boolean _sampleAttempted_defaultValue = false;
    private static final Boolean _sampled_defaultValue = false;
    private static final Boolean _debug_defaultValue = false;

    @Override
    public Struct.StructHandler<?> handler() {
        return Handler.instance;
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("ZipkinFlags{\n");
            b.append(BBUtils.indent(String.format("sampleAttempted = %s\n", String.valueOf(this.sampleAttempted == null ? _sampleAttempted_defaultValue : this.sampleAttempted))));
            b.append(BBUtils.indent(String.format("sampled = %s\n", String.valueOf(this.sampled == null ? _sampled_defaultValue : this.sampled))));
            b.append(BBUtils.indent(String.format("debug = %s\n", String.valueOf(this.debug == null ? _debug_defaultValue : this.debug))));
            b.append("}");
        return b.toString();
    }

    @Override
    public boolean equals(Object other) {
        if (other == null) {
            return ZipkinFlags.equals(this, _defaultValue);
        } else if (!(other instanceof ZipkinFlags)) {
            return false;
        } else {
            return ZipkinFlags.equals(this, (ZipkinFlags) other);
        }
    }

    @Override
    public int hashCode() {
        int result = 1;
        result = result * 37 + (this.sampleAttempted == null ? _sampleAttempted_defaultValue : this.sampleAttempted).hashCode();
        result = result * 37 + (this.sampled == null ? _sampled_defaultValue : this.sampled).hashCode();
        result = result * 37 + (this.debug == null ? _debug_defaultValue : this.debug).hashCode();
        return result;
    }

    private static boolean equals(ZipkinFlags a, ZipkinFlags b) {
        if (!BBUtils.equals(a.sampleAttempted, b.sampleAttempted, _sampleAttempted_defaultValue)) return false;
        if (!BBUtils.equals(a.sampled, b.sampled, _sampled_defaultValue)) return false;
        if (!BBUtils.equals(a.debug, b.debug, _debug_defaultValue)) return false;
        return true;
    }

    public static class Handler implements Struct.StructHandler<ZipkinFlags> {

        public static final Handler instance = new Handler();

        private Handler(){}


        private static final Struct.StructReader<Boolean> _sampleAttemptedReader = StructHelpers.boolReader;
        private static final Struct.StructSizer<Boolean> _sampleAttemptedSizer = StructHelpers.boolSizer;
        private static final Struct.StructWriter<Boolean> _sampleAttemptedWriter = StructHelpers.boolWriter;

        private static final Struct.StructReader<Boolean> _sampledReader = StructHelpers.boolReader;
        private static final Struct.StructSizer<Boolean> _sampledSizer = StructHelpers.boolSizer;
        private static final Struct.StructWriter<Boolean> _sampledWriter = StructHelpers.boolWriter;

        private static final Struct.StructReader<Boolean> _debugReader = StructHelpers.boolReader;
        private static final Struct.StructSizer<Boolean> _debugSizer = StructHelpers.boolSizer;
        private static final Struct.StructWriter<Boolean> _debugWriter = StructHelpers.boolWriter;

        @Override
        public ZipkinFlags readFrom(ByteBuffer buf) throws Exception {
            ZipkinFlags instance = new ZipkinFlags();

            try {
                instance.sampleAttempted = _sampleAttemptedReader.readFrom(buf);
                instance.sampled = _sampledReader.readFrom(buf);
                instance.debug = _debugReader.readFrom(buf);
            } catch (Exception e) {
                _log.warn("Exception parsing ZipkinFlags ", e);
            }

            return instance;
        }

        @Override
        public void writeTo(ByteBuffer buf, ZipkinFlags instance) {
            try {
                _sampleAttemptedWriter.writeTo(buf, instance.sampleAttempted == null ? _sampleAttempted_defaultValue : instance.sampleAttempted);
                _sampledWriter.writeTo(buf, instance.sampled == null ? _sampled_defaultValue : instance.sampled);
                _debugWriter.writeTo(buf, instance.debug == null ? _debug_defaultValue : instance.debug);
            } catch (Exception e) {
                _log.warn("Exception serializing ZipkinFlags ", e);
            }
        }

        @Override
        public int serializedSize(ZipkinFlags instance) {
            int size = 0;
            size += _sampleAttemptedSizer.serializedSize(instance.sampleAttempted == null ? _sampleAttempted_defaultValue : instance.sampleAttempted);
            size += _sampledSizer.serializedSize(instance.sampled == null ? _sampled_defaultValue : instance.sampled);
            size += _debugSizer.serializedSize(instance.debug == null ? _debug_defaultValue : instance.debug);
            return size;
        }
    }
}