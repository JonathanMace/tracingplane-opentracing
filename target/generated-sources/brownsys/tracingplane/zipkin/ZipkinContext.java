/** Generated by BaggageBuffersCompiler */
package brownsys.tracingplane.zipkin;

import brownsys.tracingplane.zipkin.ZipkinMetadata;
import edu.brown.cs.systems.tracingplane.baggage_buffers.BaggageBuffers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.Registrations;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Bag;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.BaggageHandler;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Brancher;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Joiner;
import edu.brown.cs.systems.tracingplane.baggage_buffers.api.Struct;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.BBUtils;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Branchers;
import edu.brown.cs.systems.tracingplane.baggage_buffers.impl.Joiners;
import edu.brown.cs.systems.tracingplane.baggage_layer.BagKey;
import edu.brown.cs.systems.tracingplane.baggage_layer.protocol.BaggageReader;
import edu.brown.cs.systems.tracingplane.baggage_layer.protocol.BaggageWriter;
import edu.brown.cs.systems.tracingplane.transit_layer.Baggage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class ZipkinContext implements Bag {

    private static final Logger _log = LoggerFactory.getLogger(ZipkinContext.class);

    public ZipkinMetadata metadata = null;

    public boolean _overflow = false;

    /**
    * <p>
    * Get the {@link ZipkinContext} set in the {@link Baggage} carried by the current thread. If no baggage is being
    * carried by the current thread, or if there is no ZipkinContext in it, then this method returns {@code null}.
    * </p>
    *
    * <p>
    * To get ZipkinContext from a specific Baggage instance, use {@link #getFrom(Baggage)}.
    * </p>
    *
    * @return the ZipkinContext being carried in the {@link Baggage} of the current thread, or {@code null}
    *         if none is being carried. The returned instance maybe be modified and modifications will be reflected in
    *         the baggage.
    */
    public static ZipkinContext get() {
        Bag bag = BaggageBuffers.get(Handler.registration());
        if (bag instanceof ZipkinContext) {
            return (ZipkinContext) bag;
        } else {
            return null;
        }
    }

    /**
    * <p>
    * Get the {@link ZipkinContext} set in {@code baggage}. If {@code baggage} has no ZipkinContext set then
    * this method returns null.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the Baggage being carried by the current thread.  To get ZipkinContext
    * from the current thread's Baggage, use {@link #get()}.
    * </p>
    *
    * @param baggage A baggage instance to get the {@link ZipkinContext} from
    * @return the {@link ZipkinContext} instance being carried in {@code baggage}, or {@code null} if none is being carried.
    *         The returned instance can be modified, and modifications will be reflected in the baggage.
    */
    public static ZipkinContext getFrom(Baggage baggage) {
        Bag bag = BaggageBuffers.get(baggage, Handler.registration());
        if (bag instanceof ZipkinContext) {
            return (ZipkinContext) bag;
        } else if (bag != null) {
            Handler.checkRegistration();
        }
        return null;
    }

    /**
    * <p>
    * Update the {@link ZipkinContext} set in the current thread's baggage. This method will overwrite any existing
    * ZipkinContext set in the current thread's baggage.
    * </p>
    *
    * <p>
    * To set the {@link ZipkinContext} in a specific {@link Baggage} instance, use
    * {@link #setIn(Baggage, ZipkinContext)}
    * </p>
    *
    * @param zipkinContext the new {@link ZipkinContext} to set in the current thread's {@link Baggage}. If {@code null}
    *            then any existing mappings will be removed.
    */
    public static void set(ZipkinContext zipkinContext) {
        BaggageBuffers.set(Handler.registration(), zipkinContext);
    }

    /**
    * <p>
    * Update the {@link ZipkinContext} set in {@code baggage}. This method will overwrite any existing
    * ZipkinContext set in {@code baggage}.
    * </p>
    *
    * <p>
    * This method does <b>not</b> affect the {@link Baggage} being carried by the current thread. To set the
    * {@link ZipkinContext} for the current thread, use {@link #set(ZipkinContext)}
    * </p>
    *
    * @param baggage A baggage instance to set the {@link ZipkinContext} in
    * @param zipkinContext the new ZipkinContext to set in {@code baggage}. If {@code null}, it will remove any
    *            mapping present.
    * @return a possibly new {@link Baggage} instance that contains all previous mappings plus the new mapping.
    */
    public static Baggage setIn(Baggage baggage, ZipkinContext zipkinContext) {
        return BaggageBuffers.set(baggage, Handler.registration(), zipkinContext);
    }

    @Override
    public BaggageHandler<?> handler() {
        return Handler.instance;
    }

    @Override
    public String toString() {
        StringBuilder b = new StringBuilder();
        b.append("ZipkinContext{\n");
            b.append(this.metadata == null ? "" : BBUtils.indent(String.format("metadata = %s\n", String.valueOf(this.metadata))));
            b.append("}");
        return b.toString();
    }

    public static class Handler implements BaggageHandler<ZipkinContext> {

        public static final Handler instance = new Handler();
        private static BagKey registration = null;

        static synchronized BagKey checkRegistration() {
            registration = Registrations.lookup(instance);
            if (registration == null) {
                _log.error("ZipkinContext MUST be registered to a key before it can be propagated.  " +
                "There is currently no registration for ZipkinContext and it will not be propagated. " +
                "To register a bag set the baggage-buffers.bags property in your application.conf " +
                "or with -Dbaggage-buffers.bags flag (eg, for key 10, -Dbaggage-buffers.bags.10=" + ZipkinContext.class.getName());
            }
            return registration;
        }

        static BagKey registration() {
            return registration == null ? checkRegistration() : registration;
        }

        private Handler(){}

        private static final BagKey _metadataKey = BagKey.indexed(0);

        private static final Struct.StructHandler<ZipkinMetadata> _metadataHandler = ZipkinMetadata.Handler.instance;
        private static final Brancher<ZipkinMetadata> _metadataBrancher = Branchers.<ZipkinMetadata>noop();
        private static final Joiner<ZipkinMetadata> _metadataJoiner = Joiners.<ZipkinMetadata>first();

        @Override
        public boolean isInstance(Bag bag) {
            return bag == null || bag instanceof ZipkinContext;
        }

        @Override
        public ZipkinContext parse(BaggageReader reader) {
            ZipkinContext instance = new ZipkinContext();

            if (reader.enter(_metadataKey)) {
                instance.metadata = _metadataHandler.parse(reader);
                reader.exit();
            }
            instance._overflow = reader.didOverflow();

            return instance;
        }

        @Override
        public void serialize(BaggageWriter writer, ZipkinContext instance) {
            if (instance == null) {
                return;
            }

            writer.didOverflowHere(instance._overflow);

            if (instance.metadata != null) {
                writer.enter(_metadataKey);
                _metadataHandler.serialize(writer, instance.metadata);
                writer.exit();
            }
        }

        @Override
        public ZipkinContext branch(ZipkinContext instance) {
            if (instance == null) {
                return null;
            }

            ZipkinContext newInstance = new ZipkinContext();
            newInstance.metadata = _metadataBrancher.branch(instance.metadata);
            return newInstance;
        }

        @Override
        public ZipkinContext join(ZipkinContext left, ZipkinContext right) {
            if (left == null) {
                return right;
            } else if (right == null) {
                return left;
            } else {
                left.metadata = _metadataJoiner.join(left.metadata, right.metadata);
                return left;
            }
        }
    }
}